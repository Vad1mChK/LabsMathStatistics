"""
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–≤—ã–µ —á–µ—Ç—ã—Ä–µ –º–æ–º–µ–Ω—Ç–∞, –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –∞—Å–∏–º–ø—Ç–æ—Ç–∏—á–µ—Å–∫–æ–π
–Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–æ—á–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ, –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏, –≤—ã–±–æ—Ä–æ—á–Ω–æ–π –∫–≤–∞–Ω—Ç–∏–ª–∏ –ø–æ—Ä—è–¥–∫–∞ 0,5 –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.

–¢–∞–∫–∂–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å –í –¢–û–ú, –ß–¢–û ùëõùêπ(ùëã(2)) ‚Üí ùëà1 ‚àº Œì(2, 1) and ùëõ(1 ‚àí ùêπ(ùëã(ùëõ))) ‚Üí ùëà2 ‚àº Œì(1, 1) = Exp(1).

–£–∫–∞–∑–∞–Ω–∏–µ: —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞, –¥–ª—è –∫–∞–∂–¥–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
 –≤—ã–±–æ—Ä–∫–∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç –≤—ã–±–æ—Ä–æ–∫), –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π
  —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º –µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–æ–π –º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å (–ø–æ–∫–∞ —ç—Ç–æ –º–µ—Ç–æ–¥
   "–Ω–∞ –≥–ª–∞–∑", –Ω–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –º—ã —Ä–∞–∑–±–µ—Ä–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É, –ø–æ–∑–≤–æ–ª—è—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    –≤—ã–±–æ—Ä–∫–∏ –µ –∑–∞–¥–∞–Ω–Ω—ã–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–º –∑–∞–∫–æ–Ω–æ–º), —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–º–∏–º–æ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç, –æ–∂–∏–¥–∞–Ω–∏–µ, –¥–∏—Å–ø–µ—Ä—Å–∏—é (–∏–ª–∏
     —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ) –∏ –º–µ–¥–∏–∞–Ω—É.
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gamma, norm, expon


def plot_histogram(location, data, title: str, color: str, density: bool = True):
    location.hist(data, bins=25, alpha=0.6, density=density, color=color)
    location.set_title(title)


def plot_density(location, func, x_range, color: str = 'k'):
    y = func(x_range)
    location.plot(x_range, y, color=color, linewidth=2)


if __name__ == '__main__':
    n_samples = 10000
    sample_size = 1000

    a = 0
    b = 100

    samples = np.random.uniform(low=a, high=b, size=(n_samples, sample_size))

    sample_means = samples.mean(axis=1)
    sample_variances = samples.var(axis=1, ddof=1)
    sample_medians = np.median(samples, axis=1)

    sorted_samples = np.sort(samples, axis=1)

    u1 = n_samples * (sorted_samples[:, 1] - a) / (b - a)
    u2 = n_samples * (1 - (sorted_samples[:, -1] - a) / (b - a))

    fig, axs = plt.subplots(3, 2, figsize=(16.5 / 2.54, 25 / 2.54))

    plot_histogram(axs[0, 0], sample_means, title='–í—ã–±–æ—Ä–æ—á–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ', color='r')
    means_mean = np.mean(sample_means)
    means_stddev = np.std(sample_means, ddof=1)
    xval = np.linspace(
        means_mean - 3 * means_stddev, means_mean + 3 * means_stddev, 1000
    )
    plot_density(axs[0, 0], lambda x: norm.pdf(x, means_mean, means_stddev), xval)

    plot_histogram(axs[1, 0], sample_variances, title='–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏', color='g')
    variances_mean = np.mean(sample_variances)
    variances_stddev = np.std(sample_variances, ddof=1)
    xval = np.linspace(
        variances_mean - 3 * variances_stddev, variances_mean + 3 * variances_stddev, 1000
    )
    plot_density(axs[1, 0], lambda x: norm.pdf(x, variances_mean, variances_stddev), xval)

    plot_histogram(axs[2, 0], sample_medians, title='–í—ã–±–æ—Ä–æ—á–Ω—ã–µ –º–µ–¥–∏–∞–Ω—ã', color='m')
    medians_mean = np.mean(sample_medians)
    medians_stddev = np.std(sample_medians, ddof=1)
    xval = np.linspace(
        medians_mean - 3 * medians_stddev, medians_mean + 3 * medians_stddev, 1000
    )
    plot_density(axs[2, 0], lambda x: norm.pdf(x, medians_mean, medians_stddev), xval)

    plot_histogram(axs[0, 1], u1, title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ U_1', color='y')
    xval = np.linspace(
        u1.min(), u1.max(), 1000
    )
    rv = gamma(a=2, scale=np.sqrt(u2.max() - u2.min()))
    plot_density(axs[0, 1], lambda x: rv.pdf(x), xval)

    plot_histogram(axs[1, 1], u2, title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ U_2', color='c')
    xval = np.linspace(
        u1.min(), u2.max(), 1000
    )
    rv = expon(scale=np.sqrt(u2.max() - u2.min()))
    plot_density(axs[1, 1], lambda x: rv.pdf(x), xval)

    plt.tight_layout()
    plt.show()
    plt.savefig("Task 1")